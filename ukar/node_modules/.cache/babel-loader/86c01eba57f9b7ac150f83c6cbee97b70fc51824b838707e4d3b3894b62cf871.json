{"ast":null,"code":"var _jsxFileName = \"D:\\\\appUkar\\\\frontend\\\\ukar\\\\src\\\\components\\\\pages\\\\ingredient\\\\ingredient.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Ingredient() {\n  _s();\n  //hooks\n  const [search, setSearch] = useState('');\n  const [searchResults, setSearchResults] = useState([]);\n  //FONCTION\n  const handleSearch = e => {\n    setSearch(e.target.value);\n  };\n  const handleSearchSubmit = e => {\n    e.preventDefault();\n    // Ici, vous devriez implémenter la logique de recherche en utilisant la valeur de `searchQuery`\n    // Pour cet exemple, je vais simplement simuler des résultats aléatoires\n    const randomResults = Array.from({\n      length: 5\n    }, (_, index) => ({\n      id: index + 1,\n      name: `Ingredient ${index + 1}`,\n      quantity: `${Math.floor(Math.random() * 100)} grams`\n    }));\n    setSearchResults(randomResults);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"span\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Ingr\\xE9dients\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        action: \"submit\",\n        method: \"get\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: search,\n          onChange: handleSearch\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"submit\",\n          value: \"OK\",\n          on: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 9\n  }, this);\n}\n_s(Ingredient, \"dT8zO2eqVJIg7JEQKAiVVq5mqIE=\");\n_c = Ingredient;\nexport default Ingredient;\nvar _c;\n$RefreshReg$(_c, \"Ingredient\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Ingredient","_s","search","setSearch","searchResults","setSearchResults","handleSearch","e","target","value","handleSearchSubmit","preventDefault","randomResults","Array","from","length","_","index","id","name","quantity","Math","floor","random","children","fileName","_jsxFileName","lineNumber","columnNumber","action","method","type","onChange","on","_c","$RefreshReg$"],"sources":["D:/appUkar/frontend/ukar/src/components/pages/ingredient/ingredient.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\n\r\nfunction Ingredient() {\r\n    //hooks\r\n    const [search, setSearch] = useState('');\r\n    const [searchResults, setSearchResults] = useState([]);\r\n    //FONCTION\r\n    const handleSearch = (e) => {\r\n        setSearch(e.target.value);\r\n    };\r\n\r\n    const handleSearchSubmit = (e) => {\r\n        e.preventDefault();\r\n        // Ici, vous devriez implémenter la logique de recherche en utilisant la valeur de `searchQuery`\r\n        // Pour cet exemple, je vais simplement simuler des résultats aléatoires\r\n        const randomResults = Array.from({ length: 5 }, (_, index) => ({\r\n            id: index + 1,\r\n            name: `Ingredient ${index + 1}`,\r\n            quantity: `${Math.floor(Math.random() * 100)} grams`,\r\n        }));\r\n        setSearchResults(randomResults);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <span>\r\n                <h1>Ingrédients</h1>\r\n                <form action='submit' method=\"get\">\r\n                    <input type=\"text\" value={search} onChange={handleSearch}/>\r\n                    <input type=\"submit\" value=\"OK\" on/>\r\n                </form>\r\n            </span>\r\n            \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Ingredient;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EAClB;EACA,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACO,aAAa,EAAEC,gBAAgB,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EACtD;EACA,MAAMS,YAAY,GAAIC,CAAC,IAAK;IACxBJ,SAAS,CAACI,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC;EAC7B,CAAC;EAED,MAAMC,kBAAkB,GAAIH,CAAC,IAAK;IAC9BA,CAAC,CAACI,cAAc,CAAC,CAAC;IAClB;IACA;IACA,MAAMC,aAAa,GAAGC,KAAK,CAACC,IAAI,CAAC;MAAEC,MAAM,EAAE;IAAE,CAAC,EAAE,CAACC,CAAC,EAAEC,KAAK,MAAM;MAC3DC,EAAE,EAAED,KAAK,GAAG,CAAC;MACbE,IAAI,EAAG,cAAaF,KAAK,GAAG,CAAE,EAAC;MAC/BG,QAAQ,EAAG,GAAEC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,GAAG,CAAE;IACjD,CAAC,CAAC,CAAC;IACHlB,gBAAgB,CAACO,aAAa,CAAC;EACnC,CAAC;EAED,oBACIb,OAAA;IAAAyB,QAAA,eACIzB,OAAA;MAAAyB,QAAA,gBACIzB,OAAA;QAAAyB,QAAA,EAAI;MAAW;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACpB7B,OAAA;QAAM8B,MAAM,EAAC,QAAQ;QAACC,MAAM,EAAC,KAAK;QAAAN,QAAA,gBAC9BzB,OAAA;UAAOgC,IAAI,EAAC,MAAM;UAACtB,KAAK,EAAEP,MAAO;UAAC8B,QAAQ,EAAE1B;QAAa;UAAAmB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAC,CAAC,eAC3D7B,OAAA;UAAOgC,IAAI,EAAC,QAAQ;UAACtB,KAAK,EAAC,IAAI;UAACwB,EAAE;QAAA;UAAAR,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAC,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAClC,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEN,CAAC;AAEd;AAAC3B,EAAA,CAjCQD,UAAU;AAAAkC,EAAA,GAAVlC,UAAU;AAmCnB,eAAeA,UAAU;AAAC,IAAAkC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}